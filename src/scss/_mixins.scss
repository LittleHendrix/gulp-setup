@mixin animation ( $anim-name: none, // keyframename|none
$anim-duration: 0s, // time(default=0)
$anim-timing-function: ease, // linear|ease(default)|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n)default
$anim-delay: 0, // time(default=0)
$anim-iteration-count: 1, // n|infinite
$anim-direction: normal, // normal|alternate
$anim-fill-mode: none // none(default)|forwards|backwards|both
) {
    @if $anim-name == none {
        animation: none;
    }
    @else {
        $full: $anim-name $anim-duration $anim-timing-function;

        @if $anim-delay > 0 {
            $full: $full $anim-delay;
        }

        $full: $full $anim-iteration-count $anim-direction $anim-fill-mode;
        animation: $full;
    }
}

@mixin keyframes($name) {
    @keyframes #{$name} {
        @content;
    }
}

@mixin ghost-center {
    &:before {
        content: "";
        display: inline-block;
        height: 100%;
        width: 0;
        vertical-align: middle;
    }

    > * {
        display: inline-block;
        vertical-align: middle;
    }
}

@mixin hide-text {
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
    overflow: hidden;
    text-indent: 100%;
    white-space: nowrap;
    outline: none;
    padding: 0;
    margin: 0; 
    border: 0;
}

@mixin linear-gradient($fromColor, $toColor, $dest: bottom, $angle: null) {
    background-color: $toColor; /* Fallback Color */
    @if ($angle) {
        background-image: linear-gradient($angle, $fromColor, $toColor);
    } @else {
        background-image: linear-gradient(to $dest, $fromColor, $toColor);
    }
    /* "Invalid", but works in 6-8 */
    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr='#{$fromColor}', endColorstr='#{$toColor}');

    /* Valid, works in 8-9 */
    -ms-filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}